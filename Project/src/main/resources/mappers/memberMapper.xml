<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.mappers.memberMapper">
	<select id="getOrderList"
		resultType="com.project.vodto.jmj.MyPageOrderList">
	SELECT  o.order_no, o.order_time, o.delivery_status, o.invoice_number, d.product_id,
		pay.actual_payment_amount, prod.product_info_image,  prod.product_name, sum(d.product_quantity) as totalOrderCnt
		FROM products prod, detailed_order_items d, order_history o, payments pay
        where member_id = #{memberId}
        and prod.product_id = d.product_id
        and d.order_no = o.order_no
        and o.order_no = pay.order_no group by o.order_no order by order_time desc
	</select>

	<select id="getProductCount" resultType="int">
		select count(*) from
		detailed_order_items where order_no = #{orderNo}
	</select>
	
	<select id="getMemberInfo" resultType="com.project.vodto.Member">
		select * from member where member_id = #{memberId}
	</select>
	
	<select id="getEmail" resultType="com.project.vodto.Member">
		select * from member where email = #{email}
	</select>
	
	<select id="getPhoneNumber" resultType="com.project.vodto.Member">
		select phone_Number from member where phone_number = #{phoneNumber}
	</select>
	
	<select id="getCellPhoneNumber" resultType="com.project.vodto.Member">
		select cell_phone_number from member where cell_phone_number = #{cellPhoneNumber}
	</select>
	
	<update id="updateAuthentication">
		update member set identity_verification_status = 'Y' where member_id = #{memberId}
	</update>
	
	<update id="updatePwd">
		update member set password=sha1(md5(#{password})) where member_id=#{memberId}
	</update>
	<update id="updatePhoneNumber">
		update member set phone_number=#{phoneNumber} where member_id=#{memberId}
	</update>
	<update id="updatecellPhoneNumber">
		update member set cell_phone_number=#{cellPhoneNumber} where member_id=#{memberId}
	</update>
	<update id="updateAddr">
		update member set zip_code=#{zipCode}, address=#{address}, detailed_address=#{detailedAddress} where member_id=#{memberId}
	</update>
	<update id="updateEmail">
		update member set email=#{email} where member_id=#{memberId}
	</update>
	<update id="updateRefund">
		update member set refund_bank=#{refundBank}, refund_account=#{refundAccount} where member_id=#{memberId}
	</update>
	
	<update id="deleteUser">
		update member set withdraw = 'Y' where member_id = #{memberId}
	</update>
	
	<insert id="addShippingAddress">
		<selectKey resultType="int" keyProperty="addrSeq" order="BEFORE">
	        select max(addr_seq) + 1 from shipping_address       
	    </selectKey> 
		insert into shipping_address(addr_seq, member_id, recipient, recipient_contact, zip_code, address, detail_address)
 		values(#{addrSeq}, #{memberId}, #{recipient}, #{recipientContact}, #{zipCode}, #{address}, #{detailAddress})
	</insert>
	
	<select id="getShippingAddress" resultType="com.project.vodto.ShippingAddress">
		select * from shipping_address where member_id = #{memberId} order by basic_addr desc
	</select>
	
	<update id="updateShippingAddress">
		update shipping_address set recipient = #{recipient}, recipient_contact = #{recipientContact}, 
		zip_code = #{zipCode}, address = #{address}, detail_address = #{detailAddress} 
		where member_id = #{memberId} and addr_seq=#{addrSeq}
	</update>
	
	<select id="getShippingAddr" resultType="com.project.vodto.ShippingAddress">
		select * from shipping_address where member_id = #{memberId} and addr_seq = #{addrSeq}
	</select>
	
	<delete id="delShippingAddr">
		delete from shipping_address where member_id = #{memberId} and addr_seq = #{addrSeq};
	</delete>
	
	<update id="allBasicAddrN">
		update shipping_address set basic_addr = 'N' where member_id = #{memberId}
	</update>
	
	<update id="updateBasicAddr">
		update shipping_address set basic_addr = 'Y' where member_id = #{memberId} and addr_seq = #{addrSeq}
	</update>
	
	<select id="getDetailOrder" resultType="com.project.vodto.jmj.DetailOrder"> 
		select o.order_no, o.invoice_number, o.recipient_name, o.recipient_phone_number, o.order_time,
		o.zip_code, o.shipping_address, o.detailed_shipping_address, o.delivery_status, o.delivery_message, d.product_price, d.product_quantity, d.product_status,
	    pay.payment_method, pay.total_amount, pay.shipping_fee, pay.used_reward, pay.used_points, pay.actual_payment_amount, pay.card_name, pay.card_number,
	    prod.product_info_image, prod.product_name
	    from order_history o, detailed_order_items d, payments pay, products prod
	    where member_id = #{memberId} and d.order_no = #{orderNo}
	    and prod.product_id = d.product_id
		and d.order_no = o.order_no
		and o.order_no = pay.order_no;	
	</select>

	<!-- =========================== 김진솔 =========================== -->
	<select id="getId" resultType="com.project.vodto.Member">
		SELECT member_id FROM member WHERE member_id = #{memberId}  
	</select>
	<insert id="insertMember">
		<choose>
			<when test='#{phoneNumber} != null and #{cellPhoneNumber} != null'>
				INSERT INTO member(member_id, password, name, phone_number, cell_phone_number, date_of_birth, email, gender) 
				VALUES(#{memberId}, sha1(md5(#{password})), #{name}, #{phoneNumber}, #{cellPhoneNumber}, #{dateOfBirth}, #{email}, #{gender})
			</when>
			<when test="#{phoneNumber} != null and #{cellPhoheNumber} == null">
				INSERT INTO member(member_id, password, name, phone_number, date_of_birth, email, gender) 
				VALUES(#{memberId}, sha1(md5(#{password})), #{name}, #{phoneNumber}, #{dateOfBirth}, #{email}, #{gender})
			</when>
			<otherwise>
				INSERT INTO member(member_id, password, name, cell_phone_number, date_of_birth, email, gender) 
				VALUES(#{memberId}, sha1(md5(#{password})), #{name}, #{cellPhoneNumber}, #{dateOfBirth}, #{email}, #{gender})
			</otherwise>
		</choose>
	</insert>
	<select id="login" resultType="com.project.vodto.Member">
		SELECT * FROM member WHERE member_id = #{memberId} AND password = sha1(md5(#{password}))
	</select>
	<!-- =========================== 김진솔 끝 =========================== -->
</mapper>